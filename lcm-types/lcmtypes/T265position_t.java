/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class T265position_t implements lcm.lcm.LCMEncodable
{
    public float posBody[];
    public float velBody[];
    public float rpyBOdy[];
    public float omegaBody[];
    public float accBody[];
 
    public T265position_t()
    {
        posBody = new float[3];
        velBody = new float[3];
        rpyBOdy = new float[3];
        omegaBody = new float[3];
        accBody = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9aa722eb9173f1a4L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.T265position_t.class))
            return 0L;
 
        classes.add(lcmtypes.T265position_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.posBody[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.velBody[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.rpyBOdy[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.omegaBody[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.accBody[a]); 
        }
 
    }
 
    public T265position_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public T265position_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.T265position_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.T265position_t o = new lcmtypes.T265position_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.posBody = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.posBody[a] = ins.readFloat();
        }
 
        this.velBody = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.velBody[a] = ins.readFloat();
        }
 
        this.rpyBOdy = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpyBOdy[a] = ins.readFloat();
        }
 
        this.omegaBody = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.omegaBody[a] = ins.readFloat();
        }
 
        this.accBody = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.accBody[a] = ins.readFloat();
        }
 
    }
 
    public lcmtypes.T265position_t copy()
    {
        lcmtypes.T265position_t outobj = new lcmtypes.T265position_t();
        outobj.posBody = new float[(int) 3];
        System.arraycopy(this.posBody, 0, outobj.posBody, 0, 3); 
        outobj.velBody = new float[(int) 3];
        System.arraycopy(this.velBody, 0, outobj.velBody, 0, 3); 
        outobj.rpyBOdy = new float[(int) 3];
        System.arraycopy(this.rpyBOdy, 0, outobj.rpyBOdy, 0, 3); 
        outobj.omegaBody = new float[(int) 3];
        System.arraycopy(this.omegaBody, 0, outobj.omegaBody, 0, 3); 
        outobj.accBody = new float[(int) 3];
        System.arraycopy(this.accBody, 0, outobj.accBody, 0, 3); 
        return outobj;
    }
 
}

